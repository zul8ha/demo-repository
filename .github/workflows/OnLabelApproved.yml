name: Approve fork PR workflows on label

on:
  # pull_request_review:
  #   types: [submitted]
  pull_request_target:
    types: [labeled]
permissions:
  actions: write
  pull-requests: read
  contents: read
env:
  GH_TOKEN: ${{ secrets.READ_ORG_TOKEN }}
  ORG: 'zul8ha'

jobs:
  approved:
    if: github.event.label.name == 'approved'
    runs-on: ubuntu-latest
    steps:
    - name: Check actor is org member
      id: orgcheck
      run: |
          # exit on error, unset vars are erros, show error message from pipe
          set -euo pipefail

          response=$(curl -sS \
          -H "Authorization: Bearer ${GH_TOKEN}" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/orgs/${ORG}/memberships/${GITHUB_ACTOR})

          state=$(jq -r '.state // empty' <<< "$response")
          if [ "$state" != "active" ]; then
              echo "Not an org member (or token lacks read:org)"; exit 1
          fi

  trigger-rerun:
    needs: [approved]
    runs-on: ubuntu-latest
    env:
      REPO: 'zul8ha/demo-repository'
      PR: ${{ github.event.pull_request.number }}
    steps:
      - name: Show context
        run: |
          set -euo pipefail
          echo "Repo:   ${REPO}"
          echo "PR #:   ${PR}"
          echo "Actor:  ${GITHUB_ACTOR}"
          echo "Event:  ${GITHUB_EVENT_NAME}"
  
      - name: gh auth status (which token?) & version
        run: |
          set -euo pipefail
          gh --version
          gh auth status || true
          gh api rate_limit | jq '.resources.core | {remaining, used, reset}'
  
      - name: List recent PR runs (unfiltered JSON)
        run: |
          set -euo pipefail
          gh api -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${REPO}/actions/runs?event=pull_request&per_page=50" --paginate \
            > runs.json
          jq '.total_count as $n | "total_count=\($n)"' runs.json
          # show a compact table to verify the data you expect is here
          jq -r '
            .workflow_runs[] |
            [.id, .status, .conclusion, .head_repository.full_name, (.pull_requests|length)] |
            @tsv
          ' runs.json | sed $'1iID\tSTATUS\tCONCLUSION\tHEAD_REPO\tPR_COUNT'
  
      - name: Filter runs by PR number (debug view)
        run: |
          set -euo pipefail
          # Show which runs actually reference this PR number
          jq -r --argjson pr "${PR}" '
            .workflow_runs[]
            | select(.pull_requests // [] | map(.number == $pr) | any)
            | [.id,
               .head_repository.full_name,
               (.pull_requests // [] | map(.number) | join(","))]
            | @tsv
          ' runs.json \
          | sed $'1iID\tHEAD_REPO\tPRS' | column -ts $'\t' || true
  
      - name: Filter by PR number + fork (the condition you had)
        run: |
          set -euo pipefail
          jq -r --argjson pr "${PR}" '
            .workflow_runs[]
            | select(
                (.head_repository.fork == true) and
                (.pull_requests // [] | map(.number == $pr) | any)
              )
            | .id
          ' runs.json > candidate_ids.txt || true
  
          echo "Candidate count: $(wc -l < candidate_ids.txt)"
          echo "Candidate IDs:"
          cat candidate_ids.txt || true
  
      - name: Approve candidates
        if: success()
        run: |
          set -euo pipefail
          while read -r RUN_ID; do
            [ -z "${RUN_ID:-}" ] && continue
            echo "Approving run ${RUN_ID}"
            gh api -X POST -H "X-GitHub-Api-Version: 2022-11-28" \
              "repos/${REPO}/actions/runs/${RUN_ID}/approve" \
            || echo "Skip ${RUN_ID}: not awaiting approval or already approved"
          done < candidate_ids.txt
